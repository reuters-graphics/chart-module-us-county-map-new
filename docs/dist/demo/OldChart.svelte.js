import './OldChart.svelte.css';
/* src/demo/OldChart.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { afterUpdate } from "../../_snowpack/pkg/svelte.js";
import Docs from "./App/Docs.svelte.js";
import Explorer from "./App/Explorer.svelte.js";
import CountyMap from "../js/index.js";

function create_fragment(ctx) {
	let div0;
	let t0;
	let div1;
	let button0;
	let t2;
	let button1;
	let t4;
	let docs;
	let t5;
	let explorer0;
	let t6;
	let explorer1;
	let current;
	let mounted;
	let dispose;
	docs = new Docs({});

	explorer0 = new Explorer({
			props: {
				title: "Data",
				data: /*chart*/ ctx[1].data()
			}
		});

	explorer1 = new Explorer({
			props: {
				title: "Props",
				data: /*chart*/ ctx[1].props()
			}
		});

	return {
		c() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			button0.textContent = "New data";
			t2 = space();
			button1 = element("button");
			button1.textContent = "Change fill";
			t4 = space();
			create_component(docs.$$.fragment);
			t5 = space();
			create_component(explorer0.$$.fragment);
			t6 = space();
			create_component(explorer1.$$.fragment);
			attr(div0, "id", "us-county-map-new-container");
			attr(button0, "class", "svelte-18c2cmx");
			attr(button1, "class", "svelte-18c2cmx");
			attr(div1, "class", "chart-options svelte-18c2cmx");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			/*div0_binding*/ ctx[4](div0);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, button0);
			append(div1, t2);
			append(div1, button1);
			insert(target, t4, anchor);
			mount_component(docs, target, anchor);
			insert(target, t5, anchor);
			mount_component(explorer0, target, anchor);
			insert(target, t6, anchor);
			mount_component(explorer1, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[5]),
					listen(button1, "click", /*click_handler_1*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const explorer0_changes = {};
			if (dirty & /*chart*/ 2) explorer0_changes.data = /*chart*/ ctx[1].data();
			explorer0.$set(explorer0_changes);
			const explorer1_changes = {};
			if (dirty & /*chart*/ 2) explorer1_changes.data = /*chart*/ ctx[1].props();
			explorer1.$set(explorer1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(docs.$$.fragment, local);
			transition_in(explorer0.$$.fragment, local);
			transition_in(explorer1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(docs.$$.fragment, local);
			transition_out(explorer0.$$.fragment, local);
			transition_out(explorer1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			/*div0_binding*/ ctx[4](null);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if (detaching) detach(t4);
			destroy_component(docs, detaching);
			if (detaching) detach(t5);
			destroy_component(explorer0, detaching);
			if (detaching) detach(t6);
			destroy_component(explorer1, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function getRandomData() {
	const arr = [];

	for (let i = 0; i < 3; i++) {
		const d = {
			x: Math.floor(Math.random() * Math.floor(100)), //Random int 0-100
			y: Math.floor(Math.random() * Math.floor(100)), //Random int 0-100
			r: Math.floor(Math.random() * Math.floor(30 - 10) + 10), //Random int 10-30
			
		};

		arr.push(d);
	}

	return arr;
}

function instance($$self, $$props, $$invalidate) {
	let chartProps;
	let { responsive } = $$props; // eslint-disable-line
	let chart = new CountyMap();
	let chartContainer;

	// let chartData = getRandomData();
	let circleFill = "steelblue";

	afterUpdate(() => {
		// ðŸ’ª Create a new chart instance of your module.
		$$invalidate(1, chart = new CountyMap());

		// âš¡ And let's use your chart!
		chart.selection(chartContainer).// .data(chartData) // Pass your chartData
		// .props(chartProps) // Pass your chartProps
		draw(); // ðŸš€ DRAW IT!
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			chartContainer = $$value;
			$$invalidate(2, chartContainer);
		});
	}

	const click_handler = () => {
		chartData = getRandomData();
	};

	const click_handler_1 = () => {
		$$invalidate(0, circleFill = circleFill === "orange" ? "steelblue" : "orange");
	};

	$$self.$$set = $$props => {
		if ("responsive" in $$props) $$invalidate(3, responsive = $$props.responsive);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*circleFill*/ 1) {
			// ...
			// ðŸŽˆ Tie your custom props back together into one chartProps object.
			$: chartProps = { fill: circleFill };
		}
	};

	return [
		circleFill,
		chart,
		chartContainer,
		responsive,
		div0_binding,
		click_handler,
		click_handler_1
	];
}

class OldChart extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { responsive: 3 });
	}
}

export default OldChart;